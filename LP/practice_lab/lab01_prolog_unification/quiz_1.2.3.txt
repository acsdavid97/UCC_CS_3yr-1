a. ?- a = a. -- yes -- two atoms unify if they are the same atom
b. ?- a = b. -- no -- two atoms unify if they are the same atom (not the case)
. ?- 1 = 2. -- no -- same for numbers
d. ?- ‘ana’ = ‘Ana’. -- no -- prolog is case sensitive when it comes to atoms
e. ?- X = 1, Y = X. -- X is instantiated to 1 and Y is instantiated to 1 too (X=Y)
f. ?- X = 3, Y = 2, X = Y. -- no -- the two variables are instantiated to
different constants
g. ?- X = 3, X = Y, Y = 2. -- no -- X is set to 3 then Y is set to X(3) then the
unification fails (3!=2)
h. ?- X = ana. -- X is instantiated to ana
i. ?- X = ana, Y = ‘ana’, X = Y. -- X and Y are the same atom
j. ?- a(b,c) = a(X,Y). -- using variables to find values (X=b) and (Y=c)
k. ?- a(X,c(d,X)) = a(2,c(d,Y)). -- same thing using compound terms
l. ?- a(X,Y) = a(b(c,Y),Z). -- since Y = Z we can substitute (kind of)
m. ?- tree(left, root, Right) = tree(left, root, tree(a, b, tree(c, d, e))). --
we find the Right subtree of the tree in the variable Right
n. ?- k(s(g),t(k)) = k(X,t(Y)). -- we saw a similar one
o. ?- father(X) = X. -- prolog has no additional info, it cannot simplify this
query further
p. ?- loves(X,X) = loves(marsellus,mia). -- no -- X cannot be unified to marsellus
and mia at the same time
q. ?- [1, 2, 3] = [a, b, c]. -- a list can be unified if its head and tail can
be unified (heads cannot be unified)
r. ?- [1, 2, 3] = [A, B, C]. -- A = 1, B = 2, C = 3
s. ?- [abc, 1, f(x) | L2] = [abc|T]. -- T variable is the tail of the list and it will be
unified to the first list without the 'abc' atom
t. ?- [abc, 1, f(x) | L2] = [abc, 1, f(x)]. -- there are no more elements in the
second list, so the L2 variable will unify with the empty list
